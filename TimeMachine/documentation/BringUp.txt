#include <MIDI.h>
#include <midi_Defs.h>
#include <midi_Message.h>
#include <midi_Namespace.h>
#include <midi_Settings.h>
#include "timerModule.h"
#include "TimeCode.h"
#include "stdint.h"

#include <SoftwareSerial.h>

SoftwareSerial mySerial(10, 11); // RX, TX

//**********************************************************************//
//  BEERWARE LICENSE
//
//  This code is free for any use provided that if you meet the author
//  in person, you buy them a beer.
//
//  This license block is BeerWare itself.
//
//  Written by:  Marshall Taylor
//  Created:  March 21, 2015
//
//**********************************************************************//

//Includes for The MicroLinkedList Library
#include "MicroLL.h"

MidiEvent * nextEventToPlay;

//fstream-like file operations on memory:
#include "MemFile.h"

const uint8_t midiFileLUT [169] = { 0x4D, 0x54, 0x68, 0x64, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x01, 0x01, 0x80, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x93, 0x00, 0xFF, 0x58, 0x04, 0x04, 0x02, 0x18, 0x08, 0x00, 0xFF, 0x51, 0x03, 0x04, 0x93, 0xE0, 0x00, 0x90, 0x24, 0x32, 0x35, 0x80, 0x24, 0x30, 0x2B, 0x90, 0x30, 0x32, 0x35, 0x80, 0x30, 0x30, 0x2B, 0x90, 0x24, 0x32, 0x35, 0x80, 0x24, 0x30, 0x2B, 0x90, 0x30, 0x32, 0x35, 0x80, 0x30, 0x30, 0x2B, 0x90, 0x24, 0x32, 0x35, 0x80, 0x24, 0x30, 0x2B, 0x90, 0x30, 0x32, 0x35, 0x80, 0x30, 0x30, 0x2B, 0x90, 0x24, 0x32, 0x35, 0x80, 0x24, 0x30, 0x2B, 0x90, 0x30, 0x32, 0x35, 0x80, 0x30, 0x30, 0x2B, 0x90, 0x24, 0x32, 0x35, 0x80, 0x24, 0x30, 0x2B, 0x90, 0x30, 0x32, 0x35, 0x80, 0x30, 0x30, 0x2B, 0x90, 0x24, 0x32, 0x35, 0x80, 0x24, 0x30, 0x2B, 0x90, 0x30, 0x32, 0x35, 0x80, 0x30, 0x30, 0x2B, 0x90, 0x24, 0x32, 0x35, 0x80, 0x24, 0x30, 0x2B, 0x90, 0x30, 0x32, 0x35, 0x80, 0x30, 0x30, 0x2B, 0x90, 0x24, 0x32, 0x35, 0x80, 0x24, 0x30, 0x2B, 0x90, 0x30, 0x32, 0x35, 0x80, 0x30, 0x30, 0x4B, 0xFF, 0x2F, 0x00 };

uint8_t * midiFileLUTPointer = (uint8_t *)midiFileLUT;

MemFile myFile( midiFileLUTPointer, midiFileLUTPointer + 168, 169 );

//File reading algorithm 
#include "MidiFile.h"
MidiFile midiFile(myFile);

//HOW TO OPERATE
//  Make TimerClass objects for each thing that needs periodic service
//  pass the interval of the period in ticks
//  Set MAXINTERVAL to the max foreseen interval of any TimerClass
//  Set MAXTIMER to overflow number in the header.  MAXTIMER + MAXINTERVAL
//    cannot exceed variable size.

//Connect listener pin 2 to sender pin 1 (and ground)

#define LEDPIN 13

#define FRAMERATE 25 //24, 25, 29.97 30
//Globals
TimerClass debounceTimer( 100 );
TimerClass ledTimer( 500 );
TimerClass ledDwell( 200 );
TimerClass inputTimer( 100 );
TimerClass qBeatTimer( 1000 );

uint16_t msTicks = 0;
uint8_t msTicksMutex = 1; //start locked out

BeatCode playHead;

uint8_t framePiece;

#define button2pin 2
#define button3pin 3
#define button4pin 4

uint8_t buttonReg = 0;
uint8_t protoSynthFeed = 0;

//MIDI_CREATE_INSTANCE(HardwareSerial, Serial, midiPort);
MIDI_CREATE_DEFAULT_INSTANCE();

#define MAXINTERVAL 2000

uint8_t frameNumber = 0;
uint16_t myBPM = 100;
//uint16_t time64th = 200;

// -----------------------------------------------------------------------------

// This function will be automatically called when a NoteOn is received.
// It must be a void-returning function with the correct parameters,
// see documentation here:
// http://arduinomidilib.fortyseveneffects.com/a00022.html

int16_t offset = 0;

void handleNoteOn(byte channel, byte pitch, byte velocity)
{
    // Do whatever you want when a note is pressed.
	
	//Make me a sammach
	offset = pitch - 28;
	
    // Try to keep your callbacks short (no delays ect)
    // otherwise it would slow down the loop() and have a bad impact
    // on real-time performance.
}

void handleNoteOff(byte channel, byte pitch, byte velocity)
{
    // Do something when the note is released.
    // Note that NoteOn messages with 0 velocity are interpreted as NoteOffs.
}

// -----------------------------------------------------------------------------

void setup()
{
  //Buttons
  pinMode(button2pin, INPUT_PULLUP);
  pinMode(button3pin, INPUT_PULLUP);
  pinMode(4, INPUT_PULLUP);
  
  //Test button pin
  pinMode(7, INPUT_PULLUP);
  
  //Test LED pins
  pinMode(8, OUTPUT);
  pinMode(9, OUTPUT);
 
  
  
  //Serial.begin(9600);
  pinMode(LEDPIN, OUTPUT);
  
  // Connect the handleNoteOn function to the library,
  // so it is called upon reception of a NoteOn.
  MIDI.setHandleNoteOn(handleNoteOn);  // Put only the name of the function
  // Do the same for NoteOffs
  MIDI.setHandleNoteOff(handleNoteOff);
  MIDI.begin(MIDI_CHANNEL_OMNI);
  MIDI.turnThruOff();
  
  // initialize Timer1
  cli();          // disable global interrupts
  TCCR1A = 0;     // set entire TCCR1A register to 0
  TCCR1B = 0;     // same for TCCR1B

  // set compare match register to desired timer count:
  OCR1A = 16000;

  // turn on CTC mode:
  TCCR1B |= (1 << WGM12);

  // Set CS10 and CS12 bits for 1 prescaler:
  TCCR1B |= (1 << CS10);


  // enable timer compare interrupt:
  TIMSK1 |= (1 << OCIE1A);

  // enable global interrupts:
  sei();
  
  // set the data rate for the SoftwareSerial port
  mySerial.begin(57600);
  mySerial.println("Program Started");   
  mySerial.print("Ticks per quarter-note: ");
  mySerial.println(midiFile.ticksPerQuarterNote);
  
  nextEventToPlay = midiFile.track2.startObjectPtr;
  
}

int i = 0;

void loop()
{
  // main program
  digitalWrite( 8, digitalRead(7));
  if( digitalRead(7) == 0)
  {
    playHead.zero();
    framePiece = 0;
    frameNumber = 0;
    digitalWrite( 9, 0 );
  }  
  if( msTicksMutex == 0 )  //Only touch the timers if clear to do so.
  {
    debounceTimer.update(msTicks);
	ledTimer.update(msTicks);
    ledDwell.update(msTicks);
    inputTimer.update(msTicks);
    qBeatTimer.update(msTicks);
    //Done?  Lock it back up
    msTicksMutex = 1;
  }  //The ISR should clear the mutex.
  
  
  if(debounceTimer.flagStatus() == PENDING)
  {
	//Is the button new?
	uint8_t tempButtonReg = digitalRead(4)^0x01;
	//mySerial.print( tempButtonReg );
    if( tempButtonReg != buttonReg )
	{
		//Going to track 2 or 1?
		if( tempButtonReg == 0 )
		{
			//track[0]
			//seek the next note to play
			nextEventToPlay = midiFile.track[0].seekNextAfter(playHead.ticks);
			protoSynthFeed = 0;
			mySerial.println("button 0");
			buttonReg = 0;
		}
		else
		{
			//track2
			//seek the next note to play
			nextEventToPlay = midiFile.track2.seekNextAfter(playHead.ticks);
			protoSynthFeed = 1;
			mySerial.println("button 1");
			buttonReg = 1;
		}
	}
  }  
  if(ledTimer.flagStatus() == PENDING)
  {
    //Turn on LED
    digitalWrite( LEDPIN, 1 );
    //Reset the timer
    ledDwell.set(200);
    
  }
  if(ledDwell.flagStatus() == PENDING)
  {
    // If the light is on, turn it off
    if( digitalRead(LEDPIN) == 1 )
    {
      digitalWrite(LEDPIN, 0);
    }
  }
  if(inputTimer.flagStatus() == PENDING)
  {
    uint32_t tempKnobValue = (analogRead( A0 ) >> 2 );
    myBPM = ((tempKnobValue * 800) >> 8) + 40;
    //time64th = ((1875 / myBPM ) >> 1 );// 60000 / myBPM / 64; //ms per 1/64th beat
    qBeatTimer.setInterval( 60000 / myBPM / 64 );
    //LED gen
    ledTimer.setInterval( 60000 / myBPM );

  }
  if(qBeatTimer.flagStatus() == PENDING)
  {
    qBeatTick();
    
  }
  i++;

  //DO THIS S*** CONTINOUSLY
  MIDI.read();
   //Seek here
  if(nextEventToPlay->timeStamp < playHead.ticks)
  {
    if((nextEventToPlay != &midiFile.track[0].nullObject)&&(nextEventToPlay != &midiFile.track2.nullObject))
	{
	  switch(nextEventToPlay->eventType)
	  {
	    case 0x80: //Note off
		//mySerial.println("Note Off");
		MIDI.sendNoteOff((nextEventToPlay->value) + offset, nextEventToPlay->data,1);  // Send a Note (pitch, velo on channel 1)
		break;
		case 0x90: //Note on
		MIDI.sendNoteOn((nextEventToPlay->value) + offset, nextEventToPlay->data,1);  // Send a Note (pitch, velo on channel 1)
		//mySerial.println("Note On");
		break;
		default:
		//mySerial.println("Not a note!");
		break;
	  }
	  nextEventToPlay = nextEventToPlay->nextObject;
	}
  
  }
  if(playHead.ticks > 1535)
  {
    playHead.zero();
	if(protoSynthFeed == 0)
	{
	   nextEventToPlay = midiFile.track[0].startObjectPtr;
	}
	else
	{
		nextEventToPlay = midiFile.track2.startObjectPtr;
	}
  }
 
 
 
}

void qBeatTick()
{
  playHead.addFramePiece();
  uint8_t data;
  switch( playHead.framePiece )
  {
    case 0x00:
    data = playHead.frames & 0x0F;
    break;
    case 0x01:
    data = playHead.frames >> 4;
    break;
    case 0x02:
    data = playHead.beats;
    break;
    case 0x03:
    data = playHead.beats >> 4;
    break;
    case 0x04:
    data = playHead.bars;
    break;
    case 0x05:
    data = playHead.bars >> 4;
    break;
    case 0x06:
    data = playHead.eightBars;
    break;
    default:
    case 0x07:
    data = playHead.eightBars >> 4;
    break;
  }
         //Big hit
        // mySerial.print( playHead.ticks );
        // mySerial.print(":");
        // mySerial.print( playHead.eightBars );
        // mySerial.print(",");
        // mySerial.print( playHead.bars );
        // mySerial.print(",");
        // mySerial.print( playHead.beats );
        // mySerial.print(",");
        // mySerial.print( playHead.frames );
        // mySerial.print(",");
        // mySerial.print( playHead.framePiece );
        // mySerial.print("\n"); 

  
  
  //Send here
  //MIDI.sendTimeCodeQuarterFrame( playHead.framePiece, data );
}

ISR(TIMER1_COMPA_vect)
{
  uint32_t returnVar = 0;
  if(msTicks >= ( MAXTIMER + MAXINTERVAL ))
  {
    returnVar = msTicks - MAXTIMER;

  }
  else
  {
    returnVar = msTicks + 1;
  }
  msTicks = returnVar;
  msTicksMutex = 0;  //unlock
}


