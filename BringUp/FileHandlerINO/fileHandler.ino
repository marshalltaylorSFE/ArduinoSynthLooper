//**********************************************************************//
//  BEERWARE LICENSE
//
//  This code is free for any use provided that if you meet the author
//  in person, you buy them a beer.
//
//  This license block is BeerWare itself.
//
//  Written by:  Marshall Taylor
//  Created:  420, 2015
//
//  The sketch outputs a series of operations on the pile to the serial
//  terminal.
//
//**********************************************************************//

#include "stdint.h"

//Includes for The MicroLinkedList Library
#include "MicroLL.h"

//instantiates MicroLL constructed to max depth of (n) stored notes
MicroLL myNotePile(100);


//fstream-like file operations on memory:
#include "MemFile.h"

const uint8_t midiFileLUT [217] = { 0x4D, 0x54, 0x68, 0x64, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x02, 0x00, 0xC0, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x65, 0x00, 0xFF, 0x58, 0x04, 0x04, 0x02, 0x18, 0x08, 0x00, 0xFF, 0x51, 0x03, 0x07, 0xA1, 0x20, 0x00, 0xFF, 0x03, 0x05, 0x6D, 0x61, 0x6A, 0x6F, 0x72, 0x00, 0x90, 0x30, 0x64, 0x81, 0x3F, 0x80, 0x30, 0x30, 0x01, 0x90, 0x3C, 0x64, 0x81, 0x3F, 0x80, 0x3C, 0x30, 0x01, 0x90, 0x30, 0x64, 0x81, 0x3F, 0x80, 0x30, 0x30, 0x01, 0x90, 0x3C, 0x64, 0x81, 0x3F, 0x80, 0x3C, 0x30, 0x01, 0x90, 0x40, 0x64, 0x81, 0x3F, 0x80, 0x40, 0x30, 0x01, 0x90, 0x3C, 0x64, 0x81, 0x3F, 0x80, 0x3C, 0x30, 0x01, 0x90, 0x30, 0x64, 0x81, 0x3F, 0x80, 0x30, 0x30, 0x01, 0x90, 0x3C, 0x64, 0x81, 0x3F, 0x80, 0x3C, 0x30, 0xB0, 0x01, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x56, 0x00, 0xFF, 0x03, 0x05, 0x6D, 0x69, 0x6E, 0x6F, 0x72, 0x00, 0x90, 0x48, 0x64, 0x81, 0x3E, 0x80, 0x48, 0x30, 0x01, 0x90, 0x54, 0x64, 0x81, 0x3F, 0x80, 0x54, 0x30, 0x01, 0x90, 0x48, 0x64, 0x81, 0x3F, 0x80, 0x48, 0x30, 0x01, 0x90, 0x54, 0x64, 0x81, 0x3F, 0x80, 0x54, 0x30, 0x01, 0x90, 0x57, 0x64, 0x81, 0x3F, 0x80, 0x57, 0x30, 0x01, 0x90, 0x54, 0x64, 0x81, 0x3F, 0x80, 0x54, 0x30, 0x01, 0x90, 0x48, 0x64, 0x81, 0x3F, 0x80, 0x48, 0x30, 0x01, 0x90, 0x54, 0x64, 0x81, 0x3F, 0x80, 0x54, 0x30, 0xB0, 0x02, 0xFF, 0x2F, 0x00 };

uint8_t * midiFileLUTPointer = (uint8_t *)midiFileLUT;

MemFile myFile( midiFileLUTPointer, midiFileLUTPointer + 216, 217 );

//File reading algorithm 
#include "MidiFile.h"

void setup()
{
	Serial.begin(57600);
	Serial.println("Program Started");   
	//get input
	Serial.print( (char)myFile.peek() );
	Serial.print("\n\n");

   MidiFile midiFile(myFile);

	
   int tracks = midiFile.trackCount;
   Serial.print("Ticks per quarter-note: ");
   Serial.println(midiFile.ticksPerQuarterNote);
   
   if (tracks > 1)
   {
      Serial.print("TRACKS: 0x");
	  Serial.print(tracks,HEX);
   }
   
   midiFile.track1.printfMicroLL();
   midiFile.track2.printfMicroLL();


}

void loop()
{
	Serial.println("Loop reached.  Holding.");
	while(1);
}
